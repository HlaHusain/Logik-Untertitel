0:19:20.630,0:19:27.770
gesehen haben, wie rekursive Definition und Ausführung
von Programmen oder der Generate-and-Test Ansatz,

0:19:27.770,0:19:34.190
das waren wichtige Aspekte für die Prolog-Programmierung.
Die wir aber in der Prädikatenlogik nicht

0:19:34.190,0:19:41.440
betrachten werden. Das könnte man. Also im Grunde genommen
lässt sich Prolog in die Prädikatenlogik einbetten.

0:19:41.440,0:19:48.710
Allerdings ist der Fokus einfach ein anderer.
In der Prädikatenlogik geht es wieder mehr darum,

0:19:48.710,0:19:54.270
Aussagen zu formalisieren, sich über deren Gültigkeit
oder zumindest Erfüllbarkeit Gedanken zu machen. Und

0:19:54.270,0:19:58.940
nicht in erster Linie ein Programm zu haben, das
man ausführen kann. Dafür ist Prolog gemacht.

0:19:58.940,0:20:06.060
Und das ist eine echte Teilmenge der Prädikatenlogik.
Also man kann das zwar einbetten in die Prädikatenlogik,

0:20:06.060,0:20:09.630
aber einfach die Programmausführung wird für uns
nicht mehr im Vordergrund stehen in diesem

0:20:09.630,0:20:23.070
Kapitel zur Prädikatenlogik.
Tatsächlich ist die Prädikatenlogik auch

0:20:23.070,0:20:28.600
in gewissem Sinne echt mehr als Prolog.
Also nicht nur, dass wir das Ausführen der Programme

0:20:28.600,0:20:36.120
nicht mehr betrachten, sondern die Prädikatenlogik
ist auch mächtiger als Prolog. Also es gibt da Unterschiede.

0:20:36.120,0:20:42.390
Zum einen ist die Syntax anders. In der Aussagenlogik
hatten wir diese Verknüpfungssymbole für Und, für Oder.

0:20:42.390,0:20:48.900
In Prolog waren das plötzlich Kommas und Semikolons.
Das ist nur ein oberflächlicher Unterschied,

0:20:48.900,0:20:55.430
dass wir einfach die Formeln ab jetzt wieder mehr formelhaft
schreiben werden als in dieser Programmsyntax, die Prolog hat.

0:20:55.430,0:21:00.830
Aber vor allem kommt eben auch etwas hinzu.
Mathematisch, symbolisch. Insbesondere

0:21:00.830,0:21:07.690
diese Quantorensymbole kommen hinzu. Also die Syntax
wird in gewissem Sinne wieder interessanter, statt

0:21:07.690,0:21:13.220
so vereinfacht wie in Prolog. Und zum anderen haben diese
Quantoren eben auch wichtige semantische Auswirkungen.

0:21:13.220,0:21:20.580
Also auch die Art, wie wir einer Formel Bedeutung geben,
kann weder so sein wie in der Aussagenlogik

0:21:20.580,0:21:26.060
(mit Wahrheitstafeln),  weil wir jetzt diese extra
Quantoren zu betrachten haben, noch kann die Bedeutung

0:21:26.060,0:21:30.800
von prädikatenlogischen Formeln einfach so
zugewiesen werden wie in einem Prolog-Programm,

0:21:30.800,0:21:35.120
wo man das einfach ausführt und guckt, was rauskommt.
Sozusagen war die Bedeutung eines Prolog-Programms,

0:21:35.120,0:21:39.330
was denn rauskommt, wenn ich eine Anfrage stelle.
Das wird bei der Prädikatenlogik nicht mehr so gehen,

0:21:39.330,0:21:49.500
durch diese neuen Formelkonzepte, die es auch in der
Aussagenlogik nicht gab. Diese Quantoren werden

0:21:49.500,0:21:58.390
sozusagen auch dafür sorgen, dass wir keine freien Variablen
mehr haben. In Prolog-Programmen hatten wir diese Variablen.

0:21:58.390,0:22:02.990
Und da hatten wir dieses interessante Phänomen,
dass auf der rechten Seite einer Regel eine

0:22:02.990,0:22:08.870
Variable vorkommen konnte, die frei war, die plötzlich
neu hinzukam. Da werden wir uns mit beschäftigen,

0:22:08.870,0:22:14.130
was das denn heißt in der Prädikatenlogik.
Welche Rolle spielen dann diese Quantoren?

0:22:14.130,0:22:18.260
Das kann ich jetzt nur andeuten. Das müssen wir
dann einfach an entsprechender Stelle tun.

0:22:18.260,0:22:25.830
Da gibt es dann auch ein interessantes Zusammenspiel
zwischen den Quantoren und der Negation etwa.

0:22:25.830,0:22:31.220
Eine andere, wesentliche Erweiterung (bzw. Unterschied
zwischen Prolog und Prädikatenlogik) ist, dass

0:22:31.220,0:22:36.460
wir uns in der Prädikatenlogik nicht mehr auf
Hornklauseln beschränken werden. Im Vorlesungsverlauf

0:22:36.460,0:22:41.880
hatten wir Aussagenlogik mit allgemeinen KNF-Formeln
zum Beispiel. Dann hatten wir die auf Hornformeln eingeschränkt.

0:22:41.880,0:22:45.340
Hatten dafür den Markierungsalgorithmus betrachtet.
Und dann hatten wir mit Prolog begonnen und gesagt:

0:22:45.340,0:22:49.860
Da nehmen wir auch Hornformeln/Hornklauseln,
aber jetzt eben mit Prädikaten und Datenkonstruktoren.

0:22:49.860,0:22:56.930
Jetzt gehen wir zur Prädikatenlogik,
behalten die Prädikate und Datenkonstruktoren,

0:22:56.930,0:23:04.020
führen Quantoren ein, und verzichten auf die
Einschränkung auf Hornklauseln. Das ist auch ein

0:23:04.020,0:23:11.480
sehr wesentlicher Unterschied. Die Prädikatenlogik,
die enthält einfach mehr Formeln als Prolog,

0:23:11.480,0:23:15.720
weil wir uns nicht mehr darauf beschränken,
dass das immer Hornklauseln/Hornformeln sein müssen.

0:23:15.720,0:23:21.560
Dazu wäre es natürlich nochmal wichtig, dass
Sie nochmal in sich gehen oder den Stoff wiederholen,

0:23:21.560,0:23:28.650
um sich des Unterschieds gewahr zu werden zwischen
allgemeinen Normalformen wie KNF und der speziellen

0:23:28.650,0:23:37.750
Art von Hornformeln. Schon in der Aussagenlogik, und dann auch
in Prolog. Das heißt, diese allgemeinen Normalformen,

0:23:37.750,0:23:43.100
KNF und DNF, werden uns jetzt wieder mehr beschäftigen.
Natürlich angewandt auf die Prädikatenlogik

0:23:43.100,0:23:49.900
statt nur auf aussagenlogischen Formeln.
Aber die Struktur dieser Formeln wird eben jetzt

0:23:49.900,0:23:57.060
auch in der Prädikatenlogik nachverwendet.
Zur Erinnerung: Die Hornformeln, das waren

0:23:57.060,0:24:07.830
ganz spezielle KNFs. Aber eben nicht alle KNFs.
Also wir werden einige Dinge aus der Aussagenlogik

0:24:07.830,0:24:15.530
wiederverwenden. Dann habe ich hier auch nochmal
aufgezählt, was wir wieder wissen müssen, was Sie

0:24:15.530,0:24:21.620
wiederholen sollten. Also zur Beschreibung der Semantik
von Formeln hatten wir mit Belegungen operiert.