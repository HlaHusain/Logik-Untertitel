0:00:01.140,0:00:07.730
Als ein komplexeres Beispiel für Generate-and-Test
möchte ich auf dieses sogenannte Einsteinrätsel

0:00:07.730,0:00:13.780
zurückkehren. Das hatte ich bereits
in der Einführung/Motivation der

0:00:13.780,0:00:19.039
Lehrveranstaltung verwendet und ich hatte auch
zu Beginn des Prolog-Teils behauptet, dass

0:00:19.039,0:00:26.050
man das gut mit Prolog lösen könne. Zur Erinnerung:
Das war die Situation, dass irgendwie gesagt war

0:00:26.050,0:00:31.829
(auf Englisch formuliert): "Five Houses. Each of a different
colour and inhabited by a man of a different nationality.

0:00:31.829,0:00:37.399
Different pet, drink and brand of smokes."
Also gibt es diese verschiedenen Eigenschaften,

0:00:37.399,0:00:43.170
welche die Häuser haben. Wer da drin wohnt.
Wo sie stehen. Welche Farben sie haben.

0:00:43.170,0:00:50.760
Und dann noch Eigenschaften des Hausbewohners. Und
es sind eine Reihe von Hinweisen in natürlicher

0:00:50.760,0:00:56.500
Sprache gegeben, die wir natürlich noch irgendwie
dann auf Logik oder in unserem Fall jetzt

0:00:56.500,0:01:02.339
Prolog umsetzen müssten. Dann wird
durch diese Hinweise sozusagen

0:01:02.339,0:01:07.000
eine Situation beschrieben und am Ende gibt es die
Frage aus dem Rätsel, wer denn der Zebrabesitzer

0:01:07.000,0:01:14.360
und wer der Wassertrinker ist. Also bestimmte
Eigenschaften aus diesen Hinweisen herauszufinden.

0:01:14.360,0:01:20.820
In dem Fall: Wer das Zebra besitzt und wer Wasser trinkt.
Es könnten auch andere Sachen gefragt sein. Der Punkt ist,

0:01:20.820,0:01:26.680
man muss aus den Hinweisen genug Informationen ziehen,
um solche spezifischen Fragen beantworten zu können.

0:01:26.680,0:01:32.690
Und das möchten wir gern per Generate-and-Test
lösen. Das heißt, wir wissen schon, dass wir uns

0:01:32.690,0:01:39.790
zunächst erst mal wahrscheinlich überlegen sollten,
wie wir denn den Generate-Teil umsetzen können.

0:01:39.790,0:01:43.780
Der ist jetzt tatsächlich ein wenig anders als in
den Beispielen zuvor. Da hatten wir immer entweder

0:01:43.780,0:01:49.619
member oder permutation verwendet, weil wir
zum Beispiel einfach die Würfelzahlen aus einem

0:01:49.619,0:01:58.100
festen Vorrat ziehen wollten. Oder bestimmte
Ziffern hatten und Kombinationen suchten, wie

0:01:58.100,0:02:02.189
sie auf einzelne Buchstaben abzubilden sind oder
die Buchstaben auf die Ziffern. Da war dann die

0:02:02.189,0:02:08.869
Permutation ein relevantes Mittel. Hier ist das jetzt ein
bisschen anders. Hier ist es ja nicht so ein Bereich,

0:02:08.869,0:02:13.099
auf den man irgendetwas zieht, sondern es geht einfach darum,
dass diese verschiedenen Konstellationen, welche die Häuser

0:02:13.099,0:02:18.610
haben könnten, der Suchraum sind. Dann könnten
wir erst mal ganz abstrakt herangehen und sagen:

0:02:18.610,0:02:28.370
Unser Generate-Teil ist einfach nur der Ausdruck,
dass es fünf Häuser gibt. Also wir wollen

0:02:28.370,0:02:32.980
sozusagen die Häuser in einer Liste ablegen. Wir wissen
am Anfang, dass es eine fünfelementige Liste ist,

0:02:32.980,0:02:38.120
weil es fünf Häuser gibt. Aber wir sagen beim Suchraum zunächst:
"Der ist ganz allgemein. Es gibt nur diese fünf Häuser.

0:02:38.120,0:02:42.239
Wir wissen noch nichts über ihre Eigenschaften."
Das heißt, der gesamte Suchraum wäre

0:02:42.239,0:02:47.379
einfach alle möglichen Ausprägungen, die es
hier gibt. Da können wir wieder diesen _ nutzen

0:02:47.379,0:02:51.849
als anonyme Variable. Also Informationen,
die noch belegt werden müssen natürlich,

0:02:51.849,0:02:58.620
aber am Anfang völlig frei sind. Also der Suchraum wäre
entsprechend groß. Wir könnten auch schon etwas spezifischer sein.

0:02:58.620,0:03:05.290
Wir werden ja für jedes Haus fünf Eigenschaften
ablegen müssen, entsprechend dessen, was das

0:03:05.290,0:03:12.299
Rätsel an Attributen für die Häuser hergibt.
Also ihre Farbe, Nationalität des Bewohners etc.

0:03:12.299,0:03:17.560
Dann können wir das auch schon etwas
spezifischer/verfeinerter machen und sagen:

0:03:17.560,0:03:22.840
Wir haben diese fünf Häuser. Jedes dieser fünf
Häuser hat fünf Eigenschaften, die aber auch

0:03:22.840,0:03:29.849
am Anfang alle sozusagen leer gesetzt sind.
Wir könnten sagen: Der Suchraum sind einfach

0:03:29.849,0:03:35.370
alle Häuser oder alle Hauslisten der Form, dass
wir fünf Häuser haben. Jedes Haus hat diese fünf

0:03:35.370,0:03:42.019
Eigenschaften, die am Anfang aber alle unbekannt sind.
Natürlich entspricht das (relativ gut sogar) dem,

0:03:42.019,0:03:45.689
was wir bei unserer händischen Lösung gemacht haben. Da
hatten wir nämlich angefangen, so eine Matrix zu füllen.

0:03:45.689,0:03:57.700
Ich erinnere noch einmal daran. Das sah
nämlich so aus. So hatten wir begonnen,

0:03:57.700,0:04:03.120
die händische Lösung. Also diese Matrix
aufgestellt. Da gab es auch diese fünf Häuser.

0:04:03.120,0:04:08.379
Dann jeweils fünf Eigenschaften. Also
irgendwie 25 Positionen zu füllen.

0:04:08.379,0:04:13.760
Hier stand am Anfang noch nichts drin. Das entspricht
jetzt eben diesen _, dass wir alles noch leer haben.

0:04:13.760,0:04:20.510
Etwas aufpassen müssen wir, dass in der Prolog-Listen-Darstellung,
(geschuldet der Tatsache, wie diese Listen aufgeschrieben werden)

0:04:20.510,0:04:25.190
die Matrix sozusagen genau transponiert zu lesen ist. Also
hier steht: 1. Haus, 2. Haus, 3. Haus, 4. Haus, 5. Haus.

0:04:25.190,0:04:32.570
Und hier wären die fünf Eigenschaften in
den Spalten, während gerade hier sozusagen

0:04:32.570,0:04:39.880
die Spalten die Häuser waren und in
den Zeilen jeweils die Eigenschaften

0:04:39.880,0:04:46.170
pro Haus angegeben waren. Davon abgesehen,
entspricht das hier sehr gut dieser Vorstellung:

0:04:46.170,0:04:51.110
Man hat als Suchraum einfach diese
Tabelle, die man irgendwie füllen muss.

0:04:51.110,0:04:59.040
Und der Test-Teil sorgt dann hoffentlich dafür,
dass wir oder Prolog das Problem lösen können.

0:04:59.040,0:05:10.280
Wie gehen wir dann für den Test-Teil durch? Wir
schauen uns einfach die einzelnen Hinweise an.

0:05:10.280,0:05:14.700
Wir haben diese Liste von Hinweisen. Die
sind natürlich sprachlich/verbal ausgedrückt.

0:05:14.700,0:05:20.280
Wir schauen uns jeden Einzelnen davon an und überlegen,
wie wir den als einen Prolog-Test ausdrücken können.

0:05:20.280,0:05:27.641
Natürlich über diesen Suchraum. Also bezogen auf solch
eine Häuserliste. Zum Beispiel sagt der erste Hinweis:

0:05:27.641,0:05:34.460
"Der Engländer lebt im roten Haus." Dann müssen
wir uns noch festlegen, wie wir denn hier

0:05:34.460,0:05:38.750
die Positionen interpretieren wollen. Also welche Position
entspricht welcher Eigenschaft? Da würden wir uns zum

0:05:38.750,0:05:47.320
Beispiel auf die Reihenfolge festlegen:
"color, nationality, drink, pet, smoke."

0:05:47.320,0:05:59.240
Das war die Reihenfolge, wie es in der
Matrix auch von Hand sozusagen angelegt war.

0:05:59.240,0:06:05.520
Diese Reihenfolge "color, nationality, drink, pet, smoke." Auf die lege
ich mich jetzt hier auch fest, wenn ich diese Listen interpretiere.

0:06:05.520,0:06:10.470
Dann wäre der Hinweis, dass der Engländer im
roten Haus lebt, einfach die Aussage, dass

0:06:10.470,0:06:15.780
es unter den Häusern eines geben muss, welches
die Farbe Rot hat und den Engländer beherbergt.

0:06:15.780,0:06:23.630
Welches Haus das ist, das wissen wir noch nicht.
Das könnte irgendeines dieser fünf Häuser sein.

0:06:23.630,0:06:29.930
Wir wissen auch nichts über die anderen Attribute, die
in diesem Haus vorliegen. Wir wollen nur mindestens

0:06:29.930,0:06:35.620
und genau ausdrücken, was dieser Hinweis sagt.
Nämlich: "Der Engländer lebt im roten Haus."

0:06:35.620,0:06:41.370
Das heißt, es muss ein Haus geben, wo die Farbe rot ist und der
Bewohner Engländer ist. Die anderen Sachen sind erst mal egal,

0:06:41.370,0:06:46.300
weil sie nicht durch diesen Hinweis irgendwie
festgelegt sind. Das heißt, das liefert immer noch

0:06:46.300,0:06:50.770
viele Möglichkeiten, schränkt den Suchraum nur
etwas ein. Nämlich dahin gehend, dass keine

0:06:50.770,0:06:56.400
Konstellationen vorstellbar sind, wo es nicht in
einem der Häuser diese Belegung gibt. Egal, was die

0:06:56.400,0:07:03.740
anderen drei Positionen, also zum Getränk, zum
Haustier und zur Zigarettenmarke ausdrücken.

0:07:03.740,0:07:08.380
Die sind für diesen ersten Hinweis eben nicht relevant.
Deswegen werden sie hier auch nicht irgendwie belegt.

0:07:08.380,0:07:14.880
Wir verwenden dafür also dieses member-Prädikat, obwohl
das jetzt im Test-Teil ist. Vorher in den anderen

0:07:14.880,0:07:20.190
Beispielen hatten wir member oft im Generate-Teil
benutzt. Darüber hatte ich gerade schon gesprochen.

0:07:20.190,0:07:24.150
Hier wäre das jetzt tatsächlich im Test-Teil.
Mittels des member-Prädikats drücken wir aus,

0:07:24.150,0:07:31.140
dass eines der Häuser bestimmte Eigenschaften
hat. Das war der erste Hinweis.

0:07:31.140,0:07:40.770
Wir hatten irgendwie 14 Hinweise. Wir müssen
das also jetzt für jeden Hinweis machen.

0:07:40.770,0:07:45.760
Wir machen das einfach der Reihe nach. Wir müssen uns nicht groß
überlegen, wie bei der händischen Lösung, ob wir erst den siebten oder

0:07:45.760,0:07:51.320
erst den zehnten Hinweis nehmen. Wir beschreiben jetzt ja
noch gar keine Suche. Wir beschreiben ja nur, was wir wollen.

0:07:51.320,0:07:57.480
Wenn Sie zurückdenken an das vorletzte Video:
Was? vs. Wie? bei dem Permutationssortieren.

0:07:57.480,0:08:03.320
Wir beschreiben jetzt nur, was wir wollen. Wir müssen noch
keine Strategie angeben, wie wir die Lösung finden werden.

0:08:03.320,0:08:07.720
Deswegen ist auch die Reihenfolge, in der wir diese Hinweise
behandeln, egal. Wenn wir konkret nach einer Lösung suchen,

0:08:07.720,0:08:13.150
von Hand, müssen wir das evtl. in bestimmter Reihenfolge tun.
Aber hier, wo wir nur beschreiben, was wir eigentlich wollen,

0:08:13.150,0:08:19.920
können wir das einfach eins nach dem anderen tun. Also können wir den
zweiten Hinweis nehmen. Der sagte: "Der Spanier besitzt einen Hund."

0:08:19.920,0:08:26.000
Das können wir wieder ganz analog zu diesem Hinweis beschreiben.
Es muss unter den Häusern eines geben, welches den Spanier

0:08:26.000,0:08:31.090
beherbergt und wo ein Hund lebt. Und natürlich
können wir schon wissen, dass dann offenbar das nicht

0:08:31.090,0:08:34.970
das gleiche Haus sein kann. Aber das ist nicht
unsere Aufgabe, das im Moment irgendwie auszudrücken

0:08:34.970,0:08:43.840
oder zu berücksichtigen. Wir übersetzen
einfach die einzelnen Hinweise. Die schränken

0:08:43.840,0:08:53.770
nachher ein, was Prolog an Lösungsmöglichkeiten hat.
Aber das ist nicht unsere Aufgabe oder unser Ziel hier,

0:08:53.770,0:08:59.340
diese Hinweise zu verknüpfen, zu überlegen, was
aus denen zusammen folgt. Das ist der logische

0:08:59.340,0:09:03.900
Teil, den hinterher Prolog erledigen möge,
die Lösung zu finden. Wir drücken einfach die

0:09:03.900,0:09:11.280
einzelnen Hinweise aus. Dann ist das hier ganz analog zu
diesem ersten Hinweis und bezieht sich natürlich wieder

0:09:11.280,0:09:20.170
auf die am Anfang völlig unbeschränkte Häuserliste
von der Folie zuvor. Die nächsten Hinweise

0:09:20.170,0:09:24.690
kann man auch analog behandeln. Der dritte und vierte
Hinweis sind auch Hinweise der Form, dass irgendwie

0:09:24.690,0:09:31.130
genau zwei Eigenschaften von Häusern gesetzt werden.
Also gesagt wird, dass es Häuser gibt, die genau

0:09:31.130,0:09:35.890
zwei Eigenschaften gleichzeitig haben. Zum Beispiel,
dass Kaffee im grünen Haus ausgetrunken wird,

0:09:35.890,0:09:41.320
heißt ja eben: Es gibt ein Haus, welches grün ist
und dort Kaffee getrunken wird. Das Gleiche gilt

0:09:41.320,0:09:48.360
für den vierten Hinweis. Also die kann man einfach ganz
analog zu den ersten und zweiten Hinweisen übersetzen.

0:09:48.360,0:09:56.970
Da können wir also unsere Strategie zum Ausdrücken hier
mehrfach anwenden. Danach wird es etwas interessanter.

0:09:56.970,0:10:01.320
Es gibt nämlich den fünften Hinweis und der sagt etwas, wo
man nicht einfach direkt das member-Prädikat nehmen kann.

0:10:01.320,0:10:07.630
Denn hier wird gesagt: "Das grüne Haus ist
direkt rechts vom elfenbeinfarbenen Haus."

0:10:07.630,0:10:12.940
Das ist ja keine Eigenschaft, die sich nur auf
ein Haus bezieht, wie Kaffee im grünen Haus.

0:10:12.940,0:10:19.520
Sondern hier werden irgendwie zwei Häuser miteinander in
Beziehung gesetzt. Und zwar bezüglich in dem Fall ihrer Farbe.

0:10:19.520,0:10:24.750
Also member reicht hier nicht. Member würde nur etwas über ein
Haus sagen können. Wir müssen etwas über zwei Häuser sagen.

0:10:24.750,0:10:30.270
Und zwar in der Liste aller Häuser. Wie könnten
wir das ausdrücken? Wir könnten, wenn wir

0:10:30.270,0:10:34.820
ein Prädikat hätten, das dieses "rightOf", also
rechts von etwas zu sein, ausdrücken könnte/würde,

0:10:34.820,0:10:42.270
dann könnten wir Folgendes schreiben: Wir könnten
sagen, es muss ein Haus geben, dessen Eigenschaften

0:10:42.270,0:10:46.900
bis auf die Farbe uns egal sind. Aber es ist das
grüne Haus. Und es gibt das elfenbeinfarbene Haus,

0:10:46.900,0:10:52.010
dessen andere Eigenschaften uns auch wieder egal
sind für diesen Hinweis. Wir wollen ausdrücken,

0:10:52.010,0:10:57.180
dass genau dieses eine Haus rechts von dem anderen ist
in der Häuserliste. Wir können das nur auf eine konkrete

0:10:57.180,0:11:04.670
Liste beziehen. Grünes Haus neben dem elfenbeinfarbenen
Haus in unserer Liste von Häusern, was letztlich

0:11:04.670,0:11:11.250
unser Kandidat für die Lösung des Rätsels ist. So
ein "rightOf"-Prädikat gibt es so nicht vordefiniert.

0:11:11.250,0:11:15.700
Aber wir wissen ja, wie wir Listenprädikate selber
definieren können. Es geht hier ja einfach darum,

0:11:15.700,0:11:21.020
in einer Liste (in dem Fall eine Liste von
Häusern) auszudrücken, dass zwei bestimmte Elemente

0:11:21.020,0:11:27.360
genau so vorkommen, dass das eine rechts von dem
anderen steht. Da definieren wir uns das einfach.

0:11:27.360,0:11:34.530
Wir brauchen so ein Prädikat. Das gibt es noch nicht.
Wir können das definieren. Und zwar auf einfache

0:11:34.530,0:11:39.840
Weise, mit Mitteln, die wir schon gesehen haben, die
wir auch geübt haben. Erinnern Sie sich: Es gab im

0:11:39.840,0:11:45.720
Übungsbetrieb so ein Beispiel, wo es darum ging, das erste
oder fünfte Element einer Liste zu greifen oder zu beschreiben.

0:11:45.720,0:11:50.780
Dafür hatten wir append verwenden können. So
kann man auch dieses "rechts von" ausdrücken.

0:11:50.780,0:11:57.130
Man kann sagen: "Rechts von links für zwei
konkrete Elemente heißt, es gibt eine Stelle

0:11:57.130,0:12:01.400
in der Gesamtliste, wo genau die beiden in der
Reihenfolge stehen." Da könnte man zum Beispiel

0:12:01.400,0:12:07.550
sagen: Man greife sich von der Liste einen Präfix,
der genau bis einschließlich dieser beiden Elemente

0:12:07.550,0:12:14.650
gehen soll. Einen Präfix zu greifen, heißt
einfach, es muss eine "egale"/unknown Liste geben,

0:12:14.650,0:12:20.710
so dass Präfix und dieser Rest die
ursprüngliche Gesamtliste ergibt.

0:12:20.710,0:12:25.620
In diesem Präfix wollen wir gern das [L, R] in
genau dieser Reihenfolge ganz hinten stehen.

0:12:25.620,0:12:31.220
Denn wenn sie am Ende eines Präfixes der Liste stehen,
dann heißt das, sie stehen irgendwo in der Liste.

0:12:31.220,0:12:36.810
Dass sie am Ende des Präfixes in dieser Reihenfolge stehen,
könnte man sagen: Es muss eine uninteressante Liste geben

0:12:36.810,0:12:42.100
(die könnte auch leer sein). Aber
es muss irgendeine Liste geben.

0:12:42.100,0:12:47.090
Das muss nicht die gleiche sein wie die. Anonym heißt immer irgendetwas,
völlig unabhängig von anderen Vorkommen der anonymen Variable.

0:12:47.090,0:12:52.550
Und zwar soll es irgendeine Liste geben, sodass
wenn wir da genau die Liste [L, R] dranhängen,

0:12:52.550,0:12:56.770
genau dieser Präfix entsteht, der
wiederum, wenn wir noch was dranhängen,

0:12:56.770,0:13:05.410
die Gesamtliste ergeben würde. Das drückt auf sehr
deklarative Weise aus, dass irgendwo in der Gesamtliste List

0:13:05.410,0:13:10.790
L und ein R in dieser Reihenfolge vorkommen. Also mit
anderen Worten, dass R rechts von L in der Liste vorkommt.

0:13:10.790,0:13:18.930
Und dann können wir das hier
benutzen für diesen Hinweis fünf.

0:13:18.930,0:13:25.320
Wie sehen die nächsten Hinweise aus? Sechs und
sieben sind wieder sehr einfach. Das sind wieder

0:13:25.320,0:13:31.210
einfach solche Art Hinweise, die wir mit member direkt
umsetzen können. Ich gebe das hier nicht noch mal an.

0:13:31.210,0:13:35.290
Es kommt am Ende aber eine Folie, wo alle
Hinweise übersetzt draufstehen. Aber hier

0:13:35.290,0:13:44.839
wären sechs und sieben einfach analog zu 1, 2,
3, 4. Danach wird es noch einmal spannender.

0:13:44.839,0:13:49.110
Denn achter und neunter Hinweis sehen wie folgt
aus: Die sagen auch wieder nur etwas über ein Haus.

0:13:49.110,0:13:53.860
Aber über die Position. Also nicht irgendwie "Kaffee
im grünen Haus", sondern "Milch im mittleren Haus".

0:13:53.860,0:14:00.020
Das, was hier das mittlere Haus ist, ist
ja nicht durch ein Attribut in dieser

0:14:00.020,0:14:05.690
Fünferliste ausgedrückt, wo die Farbe, Nationalität
erzeugt etc. stehen. Das heißt, das ist eher wieder eine

0:14:05.690,0:14:10.060
strukturelle Eigenschaft, die sich auf
die Häuserliste bezieht als Ganzes.

0:14:10.060,0:14:14.220
Gleiches gilt für den Hinweis neun. Der sagt auch etwas,
nicht über das Getränk, sondern über die Nationalität aus.

0:14:14.220,0:14:21.120
Aber sagt auch "im linkesten Haus". Wie
könnten wir diese Hinweise umsetzen?

0:14:21.120,0:14:31.820
Im Grunde genommen greifen wir dafür ein
wenig in den Generate-Teil ein oder über.

0:14:31.820,0:14:36.290
Ein Übergriff sozusagen auf den Generate-Teil.
Wir können nämlich einfach sagen, statt am Anfang

0:14:36.290,0:14:42.220
zu starten mit: "Häuser sind... und dann stand hier
einfach egal, egal, egal, egal." Können wir das verfeinern,

0:14:42.220,0:14:49.170
indem wir sagen: Die Häuserliste ist eine Liste von fünf
Dingen, die jeweils Listen sein können. Und übrigens

0:14:49.170,0:14:56.170
beim ersten Haus, da ist es nicht völlig egal, welche
Form das hat, sondern der Nationalitäten-Eintrag darin

0:14:56.170,0:15:02.930
muss norwegisch sein. Vorher stand hier
insgesamt für diese erste Liste einfach _.

0:15:02.930,0:15:08.150
Oder fünf Unterstriche in einer Liste. Jetzt sage
ich, an der zweiten Position möge der Norweger stehen.

0:15:08.150,0:15:13.560
Das ist dann der neunte Hinweis, der sagt eben: Das
linkeste Haus, also das erste Haus dieser Liste, ist das,

0:15:13.560,0:15:18.810
wo der Norweger lebt. Und dass Milch im mittleren Haus getrunken
wird, drücke ich dadurch aus, dass ich von dieser Häuserliste

0:15:18.810,0:15:23.270
an der dritten Position (Das ist die erste Position.
Dieser Unterstrich ist die zweite Position.) und an der

0:15:23.270,0:15:28.040
dritten Position ist ein Haus, das fünf Attribute hat,
von denen das mittlere, nämlich das Getränkeattribut,

0:15:28.040,0:15:39.790
Milch ist. Das vierte und fünfte Haus sind wieder egal. Denn
über die wird im achten und neunten Hinweis nichts gesagt.

0:15:39.790,0:15:45.940
Wir hätten analog oder alternativ auch den achten und neunten
Hinweis, statt durch Eingriff in diese Häuserdarstellung, anders

0:15:45.940,0:15:53.910
ausdrücken können, zum Beispiel mit einem first- und
third-Prädikat. Also einfach sagen, in dem Testteil stimmt es,

0:15:53.910,0:16:00.790
dass eine Liste dieser Form das erste Element der Häuserliste
ist. Wir hatten auch dieses First-Prädikat in der Übung.

0:16:00.790,0:16:07.600
Das hätte man hier auch verwenden können, statt
das hier sozusagen zu verfeinern. Man hätte hier

0:16:07.600,0:16:12.110
mehrere Möglichkeiten. Ich habe jetzt mal die gewählt, weil
sie sehr illustrativ ist, wie ich das eben ausdrücken kann.

0:16:12.110,0:16:18.850
Auch wenn ich dabei sozusagen etwas in den Generate-Teil eingreife.
Das ist ja im Endeffekt nur eine Idee des Generate-and-Test.

0:16:18.850,0:16:24.660
Man kann damit durchaus etwas herumspielen und
muss sich nicht ganz streng daran halten, dass

0:16:24.660,0:16:32.430
auf keinen Fall der achte und neunte Hinweis irgendwie
in dieser Häuserliste direkt ausgedrückt werden darf.

0:16:32.430,0:16:41.080
Jetzt haben wir den neunten Hinweis. Wie geht es weiter? Der
nächste Hinweis ist dieser: "Der Mann, welcher Chesterfield raucht,

0:16:41.080,0:16:55.029
lebt in dem Haus neben dem Mann mit dem Fuchs." Das
ist so ein wenig wie das rightOf - "rechts von".

0:16:55.029,0:17:01.029
Allerdings steht hier nur "next to". Das
könnte also sowohl links als auch rechts sein.

0:17:01.029,0:17:07.130
Wir können also nicht direkt unser rightOf verwenden, weil
das eben nichts über "neben" aussagt, sondern rechts neben.

0:17:07.130,0:17:15.660
Wir brauchen also ein weiteres Hilfsprädikat. Wir würden
gern so etwas sagen wie: "Das Haus, wo Chesterfield

0:17:15.660,0:17:24.920
geraucht wird, ist neben dem Haus, wo der Fuchs
lebt." Innerhalb dieser Häuserliste, aber eben

0:17:24.920,0:17:30.309
nicht "rightOf", sondern "nextTo". Also müssen wir uns
ein Prädikat dafür definieren. Das gibt es nämlich

0:17:30.309,0:17:35.060
auch noch nicht. Aber das ist gar nicht schwer zu definieren,
denn "nextTo" heißt ja einfach: Entweder ist das eine Haus

0:17:35.060,0:17:41.620
rechts von dem anderen oder umgekehrt. Das können wir wiederum
sehr einfach ausdrücken. Wir haben "rightOf" definiert.

0:17:41.620,0:17:46.040
Wann ist ein Element rechts von einem anderen Element in einer
Liste? Dass zwei Elemente einfach nebeneinander sind, heißt:

0:17:46.040,0:17:56.920
entweder ist X rechts von Y oder Y rechts von X. In
beiden Fällen, und zwar genau in diesen beiden Fällen,

0:17:56.920,0:18:07.670
ist X neben Y in der Liste. Das erlaubt
uns, den Hinweis zehn auszudrücken.

0:18:07.670,0:18:13.470
Dann kommen vier Hinweise, die sich jetzt alle
analog zu schon gesehenen ausdrücken lassen.

0:18:13.470,0:18:18.230
Also entweder eine Verwendung von "nextTo" oder von "member".
Also der elfte Hinweis ist wieder einer mit nextTo.

0:18:18.230,0:18:26.530
Da würden wir also so vorgehen, wie beim
zehnten Hinweis. 12. und 13. Hinweis sind wieder

0:18:26.530,0:18:33.190
einfach Hinweise, die zwei Attribute eines Hauses
verknüpfen. Also die Zigarettenmarke und das Getränk.

0:18:33.190,0:18:37.120
Oder die Nationalität und die Zigarettenmarke. Die
werden wieder mit solchen member-Zeilen ausgedrückt,

0:18:37.120,0:18:47.610
wie Hinweis 1, Hinweis 2, etc. Hinweis
14 ist wieder ein "nextTo"-Hinweis.

0:18:47.610,0:18:54.570
Also der würde wieder so ähnlich wie der zehnte Hinweis
ausgedrückt werden können. Und dann hätten wir tatsächlich

0:18:54.570,0:19:02.500
alle 14 Hinweise ausgedrückt. Sind wir fertig? Fast.
Wir müssen noch sagen, was wir eigentlich wollen.

0:19:02.500,0:19:09.090
Unsere Frage müssen wir noch stellen. Letztlich
war die Aufgabe ja, den Zebrabesitzer und den

0:19:09.090,0:19:15.110
Wassertrinker zu bestimmen, wenn
wir alle Hinweise verarbeitet haben.

0:19:15.110,0:19:20.250
Wie können wir das noch sozusagen ausdrücken? Wir
verwenden einfach Variablen für den Zebrabesitzer

0:19:20.250,0:19:27.300
und den Wassertrinker und schreiben Forderungen/
Hinweise/ Ausdrücke hin, die uns letztlich dann sagen:

0:19:27.300,0:19:34.180
"Der Zebrabesitzer als Variable ist tatsächlich jemand,
der in einem Haus wohnt, wo auch das Zebra lebt."

0:19:34.180,0:19:40.710
Analog für den Wassertrinker. Also
wir verwenden einfach Variablen

0:19:40.710,0:19:46.620
für diese beiden Unbekannten, nach denen wir
lösen wollen, und weitere member-Aufrufe,

0:19:46.620,0:19:52.670
die ausdrücken, dass der Zebrabesitzer genau die
Person ist, die in dem Haus wohnt, wo das Zebra lebt.

0:19:52.670,0:20:02.610
Dann können wir das insgesamt so aufschreiben. Hier
sind die Hilfsprädikate "rightOf" und "nextTo".

0:20:02.610,0:20:08.030
Hier ist das Prädikat, das wir aufrufen
werden. Also "solve", wir wollen lösen.

0:20:08.030,0:20:12.950
Wir wollen den Zebrabesitzer und den Wassertrinker
herausfinden. Hier sind die Hinweise verarbeitet,

0:20:12.950,0:20:20.450
so wie es gerade auf den vergangenen Folien durchgesprochen wurde. Also
hier z. B. der achte und neunte Hinweis in dieser Hausschreibweise.

0:20:20.450,0:20:26.200
Dann jeweils die einzelnen Hinweise mit member, rightOf
oder nextTo ausgedrückt. Also bis hier ist das,

0:20:26.200,0:20:31.160
was wir auf den vorherigen Folien diskutiert haben.
Und dann die beiden Anfragen nach dem Zebrabesitzer

0:20:31.160,0:20:34.460
und dem Wassertrinker können wir ausdrücken, indem
wir sagen: Für die Variablen, für diese Unbekannten

0:20:34.460,0:20:41.260
muss zum Beispiel gelten: Unter den Häusern muss
es eins geben, wo das Zebra als Haustier lebt.

0:20:41.260,0:20:47.260
Und die Nationalität des Bewohners dieses Hauses,
die mögen wir gerne als ZebraOwner in der Variable

0:20:47.260,0:20:54.920
zurückgegeben bekommen. Und analog für den Wassertrinker.
Jetzt können wir das Programm tatsächlich eingeben,

0:20:54.920,0:21:03.390
Prolog fragen, nach der Anfrage solve(ZebraOwner,
WaterDrinker). und würden als Antwort bekommen:

0:21:03.390,0:21:10.220
Der Zebrabesitzer ist der Japaner. Japanese
käme heraus als Belegung für ZebraOwner.

0:21:10.220,0:21:17.820
Und für den Wassertrinker müssten wir den Norweger bekommen.
Das ist die Lösung, die wir auch von Hand bestimmt hatten.

0:21:17.820,0:21:30.380
Zu Beginn der Diskussion am Anfang in der
ersten oder zweiten Vorlesung. Dann hätten wir

0:21:30.380,0:21:38.980
unser Rätsel auf Prolog-Weise gelöst. Ist
das jetzt besser als die händische Suche?

0:21:38.980,0:21:42.310
Das ist sicherlich eine Frage des Blickwinkels. Vielleicht
macht es mehr Spaß, so ein Rätsel von Hand zu lösen.

0:21:42.310,0:21:48.620
Aber das ist eben eine Lösung, die sich übertragen
lässt. Eine Lösung, die es uns erlaubt, uns einfach

0:21:48.620,0:21:52.400
auf das "Was?" zu konzentrieren. Nämlich auf das
Umsetzen dieser Hinweise und nicht irgendwie spezielle

0:21:52.400,0:21:58.860
Suchstrategien zu verfolgen. Das überlassen wir
dem Prolog-System. Wir mussten uns an keine

0:21:58.860,0:22:02.950
Reihenfolge halten oder keine Reihenfolge
überlegen, in der wir mit den Hinweisen arbeiten,

0:22:02.950,0:22:09.590
weil das nicht unser Problem ist, sondern Prologs Problem.
Und wir könnten (das ist vielleicht fast der wichtigste Punkt)

0:22:09.590,0:22:17.870
das sehr leicht anpassen. Also, wenn
wir das Problem von Hand lösen,

0:22:17.870,0:22:23.640
wie wir das am Anfang in der Vorlesung getan haben,
dann hatten wir ja mit den Hinweisen gearbeitet.

0:22:23.640,0:22:29.620
Manchmal auch Sachen revidieren müssen. Nehmen
wir an, wir hätten uns dabei irgendwo vertan oder

0:22:29.620,0:22:34.120
wir würden im Verlauf der Arbeit mit dem Rätsel feststellen, dass
wir einen Hinweis falsch interpretiert haben, dass der eigentlich

0:22:34.120,0:22:38.990
anders gemeint war, dann würde es hier bei dieser händischen
Lösung wahrscheinlich bedeuten, dass wir von null anfangen müssen.

0:22:38.990,0:22:43.530
Wenn wir irgendwo zwischendrin einen Hinweis
genutzt haben, der aber doch anders gemeint war

0:22:43.530,0:22:47.850
oder das Rätsel sich ändert und jemand
möchte vielleicht ein anderes Rätsel lösen,

0:22:47.850,0:22:52.320
dann können wir von dem, was wir hier von Hand
machen, nicht viel nach verwenden. Wir müssten im

0:22:52.320,0:22:56.970
schlimmsten Fall das Rätsel völlig neu lösen, weil wir vielleicht
irgendwo indirekt etwas genutzt haben, was nicht mehr stimmt.

0:22:56.970,0:23:02.059
Wir kommen natürlich auch zu einer Lösung für eine konkrete Konstellation.
Wenn wir alles richtig interpretieren, kommen wir auch auf die

0:23:02.059,0:23:11.130
gleiche Lösung mit dem Norweger, der Wasser
trinkt und dem Japaner, der das Zebra besitzt.

0:23:11.130,0:23:17.790
Aber wir sind eben sozusagen darauf festgelegt,
das mit genau den Hinweisen zu tun und können

0:23:17.790,0:23:22.920
das nicht anpassen, wenn wir etwa ein
leicht anderes Problem lösen wollen.

0:23:22.920,0:23:27.820
Hingegen können wir in unserer Prolog-Lösung
jeden Hinweis einzeln bearbeiten und dann einfach

0:23:27.820,0:23:35.500
Prolog das neu bearbeiten lassen. Also wenn wir einen der
Hinweise ändern, dann müssen wir nur den Hinweis ändern

0:23:35.500,0:23:41.250
auf angemessene Art und Weise und können dann wieder
Prolog die gesamte Arbeit überlassen, die Lösung zu finden.

0:23:41.250,0:23:49.000
Und das wird das natürlich tun, in diesem Generate-and-Test
Prinzip, weil wir das so ausgedrückt haben.
